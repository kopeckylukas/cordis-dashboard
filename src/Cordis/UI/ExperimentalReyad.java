/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Cordis.UI;

import Cordis.DB.GetEntities;
import Cordis.Entities.Organisation;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author reyad
 */
public class ExperimentalReyad extends javax.swing.JFrame {

    /**
     * Creates new form ExperimentalReyad
     */
    //Variables for charts data from database
    HashMap<Integer, String> pie_chart_data = null;
    LinkedHashMap<Integer, String> line_chart_data = null;
    HashMap<Integer, String> bar_chart_data_for_DE = null;
    HashMap<Integer, String> bar_chart_data_for_FR = null;
    HashMap<Integer, String> bar_chart_data_for_IT = null;
    HashMap<Integer, String> bar_chart_data_for_UK = null;
    HashMap<Integer, String> bar_chart_data_for_ES = null;
    List<Organisation> orgs = null;

    LinkedHashMap<Integer, String> h = null;

    //Creating object of class GetEntities
    GetEntities projectDB = new GetEntities();

    public ExperimentalReyad() {
        initComponents();
        graph_panel.setLayout(new FlowLayout());
        setLocationRelativeTo(this);
        setResizable(false);
        //All Organiztions
        LinkedHashMap<List<Organisation>, LinkedHashMap<Integer, String>> hm = projectDB.search(null);
        for (Map.Entry<List<Organisation>, LinkedHashMap<Integer, String>> entry : hm.entrySet()) {
            orgs = entry.getKey();
            h = entry.getValue();
        }
        //Pir Chart Data
        pie_chart_data = projectDB.getOrganizationsCountByCountries();
        //Line Chart Data
        line_chart_data = projectDB.getProjectsByYear();
        //Bar Chart Data
        bar_chart_data_for_DE = projectDB.getTop5OrganizationsByActivity("DE");
        bar_chart_data_for_FR = projectDB.getTop5OrganizationsByActivity("FR");
        bar_chart_data_for_IT = projectDB.getTop5OrganizationsByActivity("IT");
        bar_chart_data_for_UK = projectDB.getTop5OrganizationsByActivity("UK");
        bar_chart_data_for_ES = projectDB.getTop5OrganizationsByActivity("ES");
        //dataset for pie chart
        DefaultPieDataset dataset = new DefaultPieDataset();

        for (HashMap.Entry<Integer, String> entry : pie_chart_data.entrySet()) {
            //Adding data from hashmap to dataset for chart
            dataset.setValue(getCountryName(entry.getValue()), entry.getKey());
        }

        //Creating the Pie Chart
        JFreeChart chart = ChartFactory.createPieChart3D("Number Of Organizations Per Countries", dataset, true, true, false);

        //Creating Panel for chart
        ChartPanel panel = new ChartPanel(chart);

        //Switching on the mouse events for the chart panel
        panel.setDomainZoomable(true);

        graph_panel.add(panel, BorderLayout.CENTER);
        graph_panel.add(panel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        navbar_panel = new javax.swing.JPanel();
        pie = new javax.swing.JButton();
        line = new javax.swing.JButton();
        bar = new javax.swing.JButton();
        organization = new javax.swing.JButton();
        graph_panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pie.setText("Pie Chart");
        pie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pieActionPerformed(evt);
            }
        });

        line.setText("Line Chart");
        line.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineActionPerformed(evt);
            }
        });

        bar.setText("Bar Chart");
        bar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barActionPerformed(evt);
            }
        });

        organization.setText("View Organizations");
        organization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout navbar_panelLayout = new javax.swing.GroupLayout(navbar_panel);
        navbar_panel.setLayout(navbar_panelLayout);
        navbar_panelLayout.setHorizontalGroup(
            navbar_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navbar_panelLayout.createSequentialGroup()
                .addContainerGap(121, Short.MAX_VALUE)
                .addComponent(organization, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(pie, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(bar, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(line, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(123, 123, 123))
        );
        navbar_panelLayout.setVerticalGroup(
            navbar_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, navbar_panelLayout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addGroup(navbar_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(line, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pie, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(organization, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout graph_panelLayout = new javax.swing.GroupLayout(graph_panel);
        graph_panel.setLayout(graph_panelLayout);
        graph_panelLayout.setHorizontalGroup(
            graph_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graph_panelLayout.setVerticalGroup(
            graph_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(navbar_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(graph_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(navbar_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(graph_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pieActionPerformed
        // TODO add your handling code here:
        graph_panel.removeAll();
        graph_panel.repaint();
        graph_panel.revalidate();

        //dataset for pie chart
        DefaultPieDataset dataset = new DefaultPieDataset();

        for (HashMap.Entry<Integer, String> entry : pie_chart_data.entrySet()) {
            //Adding data from hashmap to dataset for chart
            dataset.setValue(getCountryName(entry.getValue()), entry.getKey());
        }

        //Creating the Pie Chart
        JFreeChart chart = ChartFactory.createPieChart3D("Number Of Organizations Per Countries", dataset, true, true, false);

        //Creating Panel for chart
        ChartPanel panel = new ChartPanel(chart);

        //Switching on the mouse events for the chart panel
        panel.setDomainZoomable(true);

        graph_panel.add(panel, BorderLayout.CENTER);
        graph_panel.add(panel);
        graph_panel.repaint();
        graph_panel.revalidate();
    }//GEN-LAST:event_pieActionPerformed

    private void barActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barActionPerformed
        // TODO add your handling code here:

        graph_panel.removeAll();
        graph_panel.repaint();
        graph_panel.revalidate();

        //dataset for bar chart
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        //Adding data from hashmap to dataset for chart for top 5 Countries
        for (HashMap.Entry<Integer, String> entry : bar_chart_data_for_DE.entrySet()) {
            dataset.addValue(entry.getKey(), getCountryName("DE"), entry.getValue());
        }
        for (HashMap.Entry<Integer, String> entry : bar_chart_data_for_FR.entrySet()) {
            dataset.addValue(entry.getKey(), getCountryName("FR"), entry.getValue());
        }
        for (HashMap.Entry<Integer, String> entry : bar_chart_data_for_IT.entrySet()) {
            dataset.addValue(entry.getKey(), getCountryName("IT"), entry.getValue());
        }
        for (HashMap.Entry<Integer, String> entry : bar_chart_data_for_UK.entrySet()) {
            dataset.addValue(entry.getKey(), getCountryName("UK"), entry.getValue());
        }
        for (HashMap.Entry<Integer, String> entry : bar_chart_data_for_ES.entrySet()) {
            dataset.addValue(entry.getKey(), getCountryName("ES"), entry.getValue());
        }
        //Creating the Bar Chart
        JFreeChart chart = ChartFactory.createBarChart3D(
                "Activity Types Of Organizations Within Top-5 Countries",
                "Types Of Activities",
                "Range Of Activities",
                dataset,
                PlotOrientation.VERTICAL,
                true, true, false);
        //Creating Panel for chart
        ChartPanel panel = new ChartPanel(chart);

        //Switching on the mouse events for the chart panel
        panel.setDomainZoomable(true);

        graph_panel.add(panel);
        graph_panel.repaint();
        graph_panel.revalidate();
    }//GEN-LAST:event_barActionPerformed

    private void lineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineActionPerformed
        // TODO add your handling code here:
        graph_panel.removeAll();
        graph_panel.repaint();
        graph_panel.revalidate();

        //dataset for line chart
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        for (HashMap.Entry<Integer, String> entry : line_chart_data.entrySet()) {
            if (entry.getValue() != null) {
                //Adding data from linkedhashmap to dataset for chart
                dataset.addValue(entry.getKey(), "Projects", entry.getValue());
            }
        }

        //Creating the Line Chart
        JFreeChart chart = ChartFactory.createLineChart(
                "Running Projects Per Year",
                "Year", "Number of Projects ",
                dataset,
                PlotOrientation.VERTICAL,
                true, true, false);

        //Creating Panel for chart
        ChartPanel panel = new ChartPanel(chart);

        //Switching on the mouse events for the chart panelF
        panel.setDomainZoomable(true);
        graph_panel.add(panel);
        graph_panel.repaint();
        graph_panel.revalidate();
    }//GEN-LAST:event_lineActionPerformed

    private void organizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizationActionPerformed
        graph_panel.removeAll();
        graph_panel.repaint();
        graph_panel.revalidate();

        JPanel org_panel = new JPanel();
        org_panel.setLayout(new BorderLayout());

        JPanel search_panel = new JPanel();

        JTextField tf_search = new JTextField(55);

        JButton b_search = new JButton("Search");
        JButton b_reset = new JButton("Reset");

        search_panel.add(tf_search);
        search_panel.add(b_search);
        search_panel.add(b_reset);

        //Columns of JTable
        String[] colums = {"ID", "Name", "Short Name", "Country", "URL", "VAT", "Contact", "Location", "oCode"};

        //Creating Table
        DefaultTableModel tablemodel = new DefaultTableModel(colums, 0);
        JTable table = new JTable(tablemodel);

        //Creating Scrollpane for enable scrolling of table if data exceeds the capacity
        JScrollPane sp = new JScrollPane(table);
        table.setFillsViewportHeight(true);

        int i = 0;
        for (HashMap.Entry<Integer, String> entry : h.entrySet()) {
            int locationID = entry.getKey();
            String oCode = entry.getValue();
            String[] one_s_Record = {"" + orgs.get(i).getOrgID(), orgs.get(i).getOrgName(), orgs.get(i).getOrgShortName(), orgs.get(i).getOrgCountry(), orgs.get(i).getOrgURL(), orgs.get(i).getOrgVATNumber(), orgs.get(i).getOrgContactForm(), "" + locationID, oCode};
            tablemodel.addRow(one_s_Record);
            i++;
        }

        org_panel.add(search_panel, BorderLayout.NORTH);
        org_panel.add(sp, BorderLayout.CENTER);

        //Search function
        b_search.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                tablemodel.setRowCount(0);
                LinkedHashMap<List<Organisation>, LinkedHashMap<Integer, String>> hm = projectDB.search(tf_search.getText());
                for (Map.Entry<List<Organisation>, LinkedHashMap<Integer, String>> entry : hm.entrySet()) {
                    orgs = entry.getKey();
                    h = entry.getValue();
                }
                int i = 0;
                for (HashMap.Entry<Integer, String> entry : h.entrySet()) {
                    int locationID = entry.getKey();
                    String oCode = entry.getValue();
                    String[] one_s_Record = {"" + orgs.get(i).getOrgID(), orgs.get(i).getOrgName(), orgs.get(i).getOrgShortName(), orgs.get(i).getOrgCountry(), orgs.get(i).getOrgURL(), orgs.get(i).getOrgVATNumber(), orgs.get(i).getOrgContactForm(), "" + locationID, oCode};
                    tablemodel.addRow(one_s_Record);
                    i++;
                }
            }
        });
        //Reset function
        b_reset.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                tablemodel.setRowCount(0);
                tf_search.setText("");
                LinkedHashMap<List<Organisation>, LinkedHashMap<Integer, String>> hm = projectDB.search(null);
                for (Map.Entry<List<Organisation>, LinkedHashMap<Integer, String>> entry : hm.entrySet()) {
                    orgs = entry.getKey();
                    h = entry.getValue();
                }
                int i = 0;
                for (HashMap.Entry<Integer, String> entry : h.entrySet()) {
                    int locationID = entry.getKey();
                    String oCode = entry.getValue();
                    String[] one_s_Record = {"" + orgs.get(i).getOrgID(), orgs.get(i).getOrgName(), orgs.get(i).getOrgShortName(), orgs.get(i).getOrgCountry(), orgs.get(i).getOrgURL(), orgs.get(i).getOrgVATNumber(), orgs.get(i).getOrgContactForm(), "" + locationID, oCode};
                    tablemodel.addRow(one_s_Record);
                    i++;
                }
            }
        });

        graph_panel.add(org_panel);
        graph_panel.repaint();
        graph_panel.revalidate();
    }//GEN-LAST:event_organizationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExperimentalReyad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExperimentalReyad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExperimentalReyad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExperimentalReyad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExperimentalReyad().setVisible(true);
            }
        });
    }

    public String getCountryName(String s) {
        String cm = "none";
        switch (s) {
            case "DE":
                cm = "Germany";
                break;
            case "ES":
                cm = "Spain";
                break;
            case "FR":
                cm = "France";
                break;
            case "IT":
                cm = "Italy";
                break;
            case "UK":
                cm = "United Kingdoms";
                break;
            case "NL":
                cm = "Netherland";
                break;
            case "BE":
                cm = "Belgium";
                break;
            case "EL":
                cm = "Greece";
                break;
            case "AT":
                cm = "Austria";
                break;
            case "PL":
                cm = "Poland";
                break;
            case "SE":
                cm = "Sweden";
                break;
            case "CH":
                cm = "Switzerland";
                break;
            case "NO":
                cm = "Norway";
                break;
            case "DK":
                cm = "Denmark";
                break;
            case "IE":
                cm = "Ireland";
                break;
            default:
                cm = "no-matached";
        }
        return cm;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bar;
    private javax.swing.JPanel graph_panel;
    private javax.swing.JButton line;
    private javax.swing.JPanel navbar_panel;
    private javax.swing.JButton organization;
    private javax.swing.JButton pie;
    // End of variables declaration//GEN-END:variables
}
